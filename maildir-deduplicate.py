#!/usr/bin/python
# -*- coding: UTF-8 -*-

##############################################################################
#
# Copyright (C) 2010 Kevin Deldycke <kevin@deldycke.com>
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
##############################################################################

"""
  Description:
    This script compare all mails in a maildir folder and subfolders, then delete duplicate mails.
    You can give a list of mail headers to ignore when comparing mails between each others.
    I used this script to clean up a messed maildir folder after I move several mails from a Lotus Notes database.

  Last update: 2010 jun 08

  Tested on MacOS X 10.6 with python 2.6.2.
"""

import hashlib
from mailbox      import Maildir
from email.parser import Parser


# List of mail headers to ignore when computing the hash of a mail.
# BTW, don't worry: mail header manipulation methods are case-insensitive.
HEADERS_TO_IGNORE = [ 'X-MIMETrack'  # Unique header generated by Lotus Notes on IMAP transfers
                    ]

# Global list containing all unique message's hash
unique_hashes = []

# Some stats
global duplicate_counter, mail_counter
duplicate_counter = 0
mail_counter = 0

def computeHash(mail, ignored_headers):
  """ This method remove some mail headers before generating a hash of the message
  """
  global mail_counter
  # Make a local copy of the message to manipulate it. I haven't found a cleaner way than passing trough a intermediate string representation.
  p = Parser()
  mail_copy = p.parsestr(mail.as_string())
  for header in HEADERS_TO_IGNORE:
    if mail_copy.has_key(header):
      del mail_copy[header]
  mail_counter += 1
  return hashlib.sha224(mail_copy.as_string()).hexdigest()

def processMails(mail_folder):
  global duplicate_counter
  # Analyse all mails in current folder
  mail_id_list = mail_folder.keys()
  print "Processing %s mails in the %r folder..." % (len(mail_id_list), mail_folder)
  for mail_id in mail_id_list:
    mail_hash = computeHash(mail_folder.get(mail_id), HEADERS_TO_IGNORE)
    print "  Hash is %s for mail %r" % (mail_hash, mail_id)
    if mail_hash in unique_hashes:
      # The current mail is a duplicate. Remove it
      print "  Mail is a duplicate, remove it."
      mail_folder.remove(mail_id)
      duplicate_counter += 1
    else:
      # Update unique hash list
      unique_hashes.append(mail_hash)
      print "  Mail is unique, keep it."
  # We've analysed all mails in the current folder. Look in sub folders
  for folder_name in mail_folder.list_folders():
    processMails(mail_folder.get_folder(folder_name))


processMails(Maildir("/Users/kevin/Maildir", factory=None))
print "%s duplicate removed in a total of %s mails." % (duplicate_counter, mail_counter)

